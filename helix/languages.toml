
[[language]]
name = "python"
language-id = "python"
roots = ["pyproject.toml", "poetry.lock", ".git", ".venv/"]
language-servers = ["pylsp", "ruff"]
# formatter = { command = "ruff", args = ["format", "-" ] }
formatter = { command = "bash", args = ["-c", "ruff check --fix - | ruff format -"] }
file-types = ["py", "ipynb"]
comment-token = "#"
shebangs = ["python"]
auto-format = true



[language-server.pylsp.config.pylsp]
plugins.black.enabled = false
plugins.pylint.enabled = false
plugins.pyflakes.enabled = true 
plugins.pyls_mypy.enabled = true
plugins.pyls_mypy.live_mode = false
plugins.isort.enabled = true
plugins.rope_autoimport.enabled = true 

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]


[language-server.pyright.config]
reportMissingTypeStubs = false
python.analysis.venvPath = "."
python.analysis.venv = ".venv"
python.analysis.lint = true
python.analysis.inlayHint.enable = true
python.analysis.autoSearchPaths = true
python.analysis.diagnosticMode = "workspace"
python.analysis.useLibraryCodeForType = true
python.analysis.logLevel = "Error"
python.analysis.typeCheckingMode = "off"
python.analysis.autoImoprtCompletion = true
python.analysis.reportOptionalSubscript = false
python.analysis.reportOptionalMemberAccess = false


[language-server.ruff]
command = "ruff"
args = ["server","-q", "--preview"]
environment = { "RUFF_TRACE" = "messages" }

[language-server.ruff.config.settings]
lineLength = 100
logLevel = "debug"


[[language]]
name = "scala"
scope = "source.scala"
roots = ["build.sbt", "build.sc", "build.gradle", "build.gradle.kts", "pom.xml", ".scala-build"]
file-types = ["scala", "sbt", "sc"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 2, unit = "  " }
language-servers = [ "metals" ]

[[grammar]]
name = "scala"
source = { git = "https://github.com/tree-sitter/tree-sitter-scala", rev = "7891815f42dca9ed6aeb464c2edc39d479ab965c" }

[[language]]
name = "dockerfile"
scope = "source.dockerfile"
injection-regex = "docker|dockerfile"
roots = ["Dockerfile", "Containerfile"]
file-types = [
  "Dockerfile",
  { glob = "Dockerfile" },
  { glob = "Dockerfile.*" },
  "dockerfile",
  { glob = "dockerfile" },
  { glob = "dockerfile.*" },
  "Containerfile",
  { glob = "Containerfile" },
  { glob = "Containerfile.*" },
  "containerfile",
  { glob = "containerfile" },
  { glob = "containerfile.*" },
]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-servers = [ "docker-langserver" ]

[[grammar]]
name = "dockerfile"
source = { git = "https://github.com/camdencheek/tree-sitter-dockerfile", rev = "8ee3a0f7587b2bd8c45c8cb7d28bd414604aec62" }

[[language]]
name = "docker-compose"
scope = "source.yaml.docker-compose"
roots = ["docker-compose.yaml", "docker-compose.yml"]
language-servers = [ "docker-compose-langserver", "yaml-language-server" ]
file-types = [{ glob = "docker-compose.yaml" }, { glob = "docker-compose.yml" }]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
grammar = "yaml"

[[language]]
name = "hcl"
scope = "source.hcl"
injection-regex = "(hcl|tf|nomad)"
language-id = "terraform"
file-types = ["hcl", "tf", "nomad"]
comment-token = "#"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 2, unit = "  " }
language-servers = [ "terraform-ls" ]
auto-format = true

[[grammar]]
name = "hcl"
source = { git = "https://github.com/tree-sitter-grammars/tree-sitter-hcl", rev = "9e3ec9848f28d26845ba300fd73c740459b83e9b" }

[[language]]
name = "tfvars"
scope = "source.tfvars"
language-id = "terraform-vars"
file-types = ["tfvars"]
comment-token = "#"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 2, unit = "  " }
language-servers = [ "terraform-ls" ]
auto-format = true
grammar = "hcl"


[[language]]
name="rust"
formatter = { command = "rustfmt" }
auto-format = true

[language-server.rust-analyzer.config]
checkOnSave = {command = "clippy", extraArgs = ["--", "-W", "clippy::pedantic"]}
cargo = {allFeatures = true}
procMacro = {enable = true }

 

[[language]]
name = "go"
roots = ["go.work", "go.mod"]
auto-format = true
comment-token = "//"
language-servers = [ "gopls"]

[language-server.gopls]
command = "gopls"

[language-server.gopls.config.hints]
assignVariableTypes = true
compositeLiteralFields = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[language-server.golangci-lint-lsp]
command = "golangci-lint-langserver"

[language-server.golangci-lint-lsp.config]
command = ["golangci-lint", "run", "--out-format", "json", "--issues-exit-code=1"]


[[language]]
name = "tcl"
scope = "source.tcl"
injection-regex = "tcl"
file-types = [ "tcl" ]
shebangs = [ "tclsh", "tclish", "jimsh", "wish" ]
comment-token = '#'

[[grammar]]
name = "tcl"
source = { git = "https://github.com/tree-sitter-grammars/tree-sitter-tcl", rev = "56ad1fa6a34ba800e5495d1025a9b0fda338d5b8" }
